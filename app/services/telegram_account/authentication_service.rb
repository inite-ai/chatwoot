class TelegramAccount::AuthenticationService
  attr_reader :channel

  def initialize(channel:)
    @channel = channel
  end

  def send_code
    # –†–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ MTProto
    Rails.logger.info "üöÄ AuthenticationService: calling MTProto send_code for #{channel.phone_number}"
    
    begin
      # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π MTProto –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞
      require Rails.root.join('lib', 'telegram_m_t_proto_clean')
      
      mtproto = TelegramMTProtoClean.new(
        channel.app_id.to_i,
        channel.app_hash,
        channel.phone_number
      )
      
      result = mtproto.send_code
      
      if result[:success]
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º phone_code_hash –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        channel.update!(phone_code_hash: result[:phone_code_hash])
        
        Rails.logger.info "‚úÖ MTProto send_code successful: #{result[:phone_code_hash]}"
        {
          success: true,
          requires_password: false, # TODO: –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–∑ response
          phone_code_hash: result[:phone_code_hash]
        }
      else
        Rails.logger.error "‚ùå MTProto send_code failed: #{result[:error]}"
        {
          success: false,
          error: result[:error]
        }
      end
    rescue StandardError => e
      Rails.logger.error "‚ùå MTProto send_code exception: #{e.message}"
      Rails.logger.error e.backtrace.join("\n")
      {
        success: false,
        error: "Failed to send authentication code: #{e.message}"
      }
    end
  end

  def authenticate_with_code(code)
    return { success: false, error: 'Code is required' } if code.blank?

    begin
      # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ MTProto API
      # —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
      
      Rails.logger.info "Authenticating with code for #{channel.phone_number}"
      
      # –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
      if valid_code?(code)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º session_string (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–∏–º –æ—Ç Telegram API)
        session_string = generate_mock_session_string
        
        channel.update!(
          session_string: session_string,
          is_active: true,
          account_name: fetch_account_name # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ Telegram
        )
        
        {
          success: true,
          requires_password: false
        }
      else
        {
          success: false,
          error: 'Invalid authentication code',
          requires_password: false
        }
      end
    rescue StandardError => e
      Rails.logger.error "Authentication failed: #{e.message}"
      {
        success: false,
        error: "Authentication failed: #{e.message}"
      }
    end
  end

  def authenticate_with_password(password)
    return { success: false, error: 'Password is required' } if password.blank?

    begin
      # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
      Rails.logger.info "Authenticating with 2FA password for #{channel.phone_number}"
      
      # –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å –ø–∞—Ä–æ–ª–µ–º
      if valid_password?(password)
        session_string = generate_mock_session_string
        
        channel.update!(
          session_string: session_string,
          is_active: true,
          account_name: fetch_account_name
        )
        
        { success: true }
      else
        { success: false, error: 'Invalid password' }
      end
    rescue StandardError => e
      Rails.logger.error "2FA authentication failed: #{e.message}"
      {
        success: false,
        error: "2FA authentication failed: #{e.message}"
      }
    end
  end

  private

  def valid_code?(code)
    # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ Telegram API
    # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π 5-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
    code.match?(/^\d{5}$/)
  end

  def valid_password?(password)
    # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ Telegram API
    # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π –Ω–µ–ø—É—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å
    password.length >= 1
  end

  def generate_mock_session_string
    # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ –±—É–¥–µ—Ç session string –æ—Ç Telegram API
    # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç—Ä–æ–∫—É
    SecureRandom.hex(32)
  end

  def fetch_account_name
    # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram API
    # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    "Telegram User #{SecureRandom.hex(4)}"
  end
end
